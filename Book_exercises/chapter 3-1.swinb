<div class="notebook">

<div class="nb-cell program" data-background="true" name="p1">
del(X, [X | Tail], Tail). 
del(X, [Y | Tail], [Y | Taill]) :- del(X, Tail, Taill).

insert(X, List, BiggerList) :- del(X, BiggerList, List).

sublist([],[]).
sublist(S, L) :- 
    append( _, L2, L), 
    append( S, _, L2),
    S\=[]. 

permutation([],[]). 
permutation([X | L], P) :-
    permutation(L, L1),
    insert(X, L1, P).
</div>

<div class="nb-cell query" name="q16">
sublist(A,[1,2,3])
</div>

<div class="nb-cell query" name="q4">
insert(a,[],K)
</div>

<div class="nb-cell html" name="htm1">
3.3 Define two predicates evenlength( List) and oddlength( List) 
so that they are true if their argument is a list of even or odd
length respectively. For example, the list [a,b,c,d] is 'evenlength'
and [a,b,c] is 'oddlength'.
</div>

<div class="nb-cell program" data-background="true" name="p2">
evenlength([]).
evenlength([_,_|T]) :-
     evenlength(T).

oddlength([_]).
oddlength([_,_,_|T]) :-
    oddlength([_|T]).
</div>

<div class="nb-cell query" name="q1">
evenlength([1,2,3,10])
</div>

<div class="nb-cell query" name="q2">
oddlength([1,2,3,4,5])
</div>

<div class="nb-cell html" name="htm2">
3.4 Define the relation 
reverse( List, ReversedList) 
that reverses lists. For example, reverse( [a,b,c,d], [d,c,b,a]).
</div>

<div class="nb-cell program" data-background="true" name="p3">
reverselist([],[]).
reverselist([H|T],RevList) :-
    reverselist(T,L),
    append(L,[H],RevList).
</div>

<div class="nb-cell query" name="q3">
reverselist([1,2,3],Revlist)
</div>

<div class="nb-cell html" name="htm3">
3.5 Define the predicate palindrome( List). A list is a palindrome if
it reads the same in the forward and in the backward direction.
For example, [m,a,d,a,m].
</div>

<div class="nb-cell program" data-background="true" name="p4">
palindrome(List):-
    reverselist(List,RevList),
    RevList=List.
</div>

<div class="nb-cell query" name="q5">
palindrome([m,a,d,a,m])
</div>

<div class="nb-cell html" name="htm4">
3.6 Define the relation shift( Listl, List2) 
so that List2 is Listl 'shifted rotationally' by one element to the left.
For example, 
?- shift( [1,2,3,4,5], L1), 
shift( L1, L2). 
produces: 
L1 = [2,3,4,5,1] 
L2 = [3,4,5,1,2]
</div>

<div class="nb-cell program" data-background="true" name="p5">
shift([],[]).

shift([H|T], Shifted_list) :-
    append(T,[H],Shifted_list).
</div>

<div class="nb-cell query" name="q6">
shift( [1,2,3,4,5], L1),shift( L1, L2).
</div>

<div class="nb-cell html" name="htm5">
3.7 Define the relation 
translate( Listl, List2) 
to translate a list of numbers between 0 and 9 to a list of the corresponding
words.For example: 
translate( [3,5,1,3], [three,five,one,three]) 
Use the following as an auxiliary relation: 
means( 0, zero). means( 1, one). means( 2, two). ...
</div>

<div class="nb-cell program" data-background="true" name="p6">
means(0,zero).
means(1,one).
means(2,two).
means(3,three).
means(4,four).
means(5,five).
means(6,six).
means(7,seven).
means(8,eight).
means(9,nine).

translate([],[]).
translate([X|L],[TX|TL]) :-
    means(X,TX),
    translate(L,TL).
</div>

<div class="nb-cell query" name="q7">
translate([1,3],L)
</div>

<div class="nb-cell html" name="htm6">
3.8 Define the relation subset( Set, Subset) 
where Set and Subset are two lists representing two sets. We would like to be
able to use this relation not only to check for the subset relation, but also
to generate all possible subsets of a given set. For example: 
?- subset( [a,b,c], S). 
S = [a,b,c]; 
S = [a,b]; 
S = [a,c]; 
S = [a]; 
S = [b,c]; 
S = [b];
</div>

<div class="nb-cell query" name="q8">
sublist(S, [a,b,c])
</div>

<div class="nb-cell html" name="htm7">
3.9 Define the relation dividelist( List, Listl, List2) 
so that the elements of List are partitioned between Listl
and List2, and Listl and List2 are of approximately the same length.
For example: 
dividelist( [a,b,c,d,e], [a,c,e], [b,d]).
</div>

<div class="nb-cell program" data-background="true" name="p8">
dividelist([],[],[]).
dividelist([X], [X], []).
dividelist([Elem1, Elem2|L], [Elem1|L1], [Elem2|L2]) :-
  dividelist(L, L1, L2).
</div>

<div class="nb-cell query" name="q9">
dividelist([a,b,c,d,e],L1,L2)
</div>

<div class="nb-cell html" name="htm8">
3.10 Define the predicate 
equal_length( L1, L2) 
which is true if lists L1 and L2 have equal number of elements.
</div>

<div class="nb-cell program" data-background="true" name="p7">
equal_length([],[]).

equal_length([_|L1], [_|L2]) :-
  equal_length(L1, L2).
</div>

<div class="nb-cell query" name="q10">
equal_length([1,5,3,2],[2,6,7,8]).
</div>

<div class="nb-cell html" name="htm9">
3.11 Define the relation flatten( List, FlatList) 
where List can be a list of lists, and FlatList is List 'flattened' so that
the elements of List's sublists (or sub-sublists) are reorganized as one
plain list. For example: 
?- flatten( [a,b,[c,d],[ ],[[[e]]],f], L). 
L = [a,b,c,d,e,f]
</div>

<div class="nb-cell program" data-background="true" name="p9">
flatArray([],[]).

flatArray([Head|Tail],R) :-
	flatArray(Head,New_Head),
	flatArray(Tail,New_Tail),
	append(New_Head,New_Tail,R).

flatArray([Head|Tail1], [Head|Tail2]) :-
	Head \= [],
	Head \= [_|_],
    flatArray(Tail1,Tail2).
</div>

<div class="nb-cell query" name="q11">
flatArray([a,b,[c,d]],List)
</div>

<div class="nb-cell html" name="htm10">
Page 83:

3.16 Define the relation max( X, Y, Max). so that Max is the greater of two
numbers X and Y.
</div>

<div class="nb-cell program" data-background="true" name="p10">
max(X, Y, Max_value) :-
    X =&lt; Y,
    Max_value is Y.

max( X, Y, Max_value) :-
    Y =&lt; X,
    Max_value is X.
</div>

<div class="nb-cell query" name="q12">
max(1, 2, Max)
</div>

<div class="nb-cell html" name="htm11">
3.17 Define the predicate 
maxlist( List, Max) 
so that Max is the greatest number in the list of numbers List.
</div>

<div class="nb-cell program" data-background="true" name="p11">
maxlist([],[]).

maxlist([X],Max_value):-
    Max_value is X.

maxlist([E1,E2],Max_value):-
    max(E1, E2, Maximum),
    Max_value is Maximum.

maxlist([E1,E2|T], Max_value):-
    max(E1, E2, Maximum1),
    maxlist([E2|T],Maximum2),
    max(Maximum1, Maximum2, Maximum),
    Max_value is Maximum.
</div>

<div class="nb-cell query" name="q13">
maxlist([999,15,5,6,7,10],A).
</div>

<div class="nb-cell html" name="htm12">
3.18 Define the predicate 
sumlist( List, Sum) 
so that Sum is the sum of a given list of numbers List.
</div>

<div class="nb-cell program" data-background="true" name="p12">
sumlist([X],Sum_Value) :-
    Sum_Value is X.

sumlist([H|T],Sum) :-
    T \= [],
    sumlist(T,Sum1),
    Sum is Sum1 + H.
</div>

<div class="nb-cell query" name="q14">
sumlist([2,20,50],S)
</div>

<div class="nb-cell html" name="htm13">
3.19 Define the predicate 
ordered( List) 
which is true if List is an ordered list of numbers. For example, 
ordered( [1,5,6,6,9,12]).
</div>

<div class="nb-cell program" data-background="true" name="p13">
ordered([]).
ordered([_]).

ordered([E1,E2|T]) :-
    E1 =&lt; E2,
    ordered([E2|T]).
</div>

<div class="nb-cell query" name="q15">
ordered([2,9,3,7])
</div>

<div class="nb-cell html" name="htm14">
3.20 Define the predicate subsum( Set, Sum, SubSet). so that Set is a list of numbers, SubSet is a subset of these numbers,and the sum of the numbers in SubSet is Sum.For example: 
?- subsum( [1,2,5,3,2], 5, Sub). 
Sub = [1,2,2]; 
Sub = [2,3]; 
Sub = [5];
</div>

<div class="nb-cell program" data-background="true" name="p14">
subsum([X],Sum,Sub):-
    Sub = [X],
    Sum is X.

subsum(List,Sum,Sub):-
    sublist(Sub,List),
    sumlist(Sub,Sum).
</div>

<div class="nb-cell query" name="q18">
sublist(Sub,[1,2,2,2])
</div>

<div class="nb-cell query" name="q19">
subsum([2,1,3], 3, Sub)
</div>

<div class="nb-cell query" name="q17">
subsum([1,3,2], 3, Sub) %Bug! However subsum([2,1,3], 3, Sub) works well. It seems that If the last number in the list is lower than the previous one it doesn't work, Otherwise it works well.
</div>

<div class="nb-cell html" name="htm15">
3.21 Define the procedure 
between( Nl, N2, X) 
which, for two given integers Nl and N2, generates through backtracking all the 
integers X that satisfy the constraint Nl &lt; X &lt; N2.
</div>

<div class="nb-cell program" name="p15">

</div>

</div>
